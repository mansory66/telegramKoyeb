# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import asyncio
import json
import logging
import os
import sys
from logging.handlers import RotatingFileHandler
import datetime
import hashlib
import random
import re
from decimal import Decimal

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from config import (
    BOT_TOKEN, CHANNEL_USERNAME, SHOP_ADDRESSES, 
    ADMIN_USERNAMES, PAYMENT_INFO, 
    MOYSKLAD_LOGIN, MOYSKLAD_PASSWORD,
    WELCOME_MESSAGE,
    SUBSCRIPTION_MESSAGE, CATEGORIES_MESSAGE,
    LOG_LEVEL_CODE
)
from database import Database
from update_products import main as update_products_from_moysklad

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
LANGUAGES = {
    'ru': '–†—É—Å—Å–∫–∏–π',
    'en': 'English',
    'uz': 'O\'zbek'
}

# –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
TEXTS = {
    'ru': {
        'welcome': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        'profile': '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å',
        'feedback': '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
        'categories': '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
        'back': '–ù–∞–∑–∞–¥',
        'main_menu': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'error': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        'try_later': '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
        'subscription_required': '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞',
        'not_subscribed': '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã',
        'subscribe_first': '–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å',
        'check_subscription': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
        'success': '–£—Å–ø–µ—à–Ω–æ',
        'cancel': '–û—Ç–º–µ–Ω–∞',
        'save': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        'edit': '–ò–∑–º–µ–Ω–∏—Ç—å',
        'delete': '–£–¥–∞–ª–∏—Ç—å'
    },
    'en': {
        'welcome': 'Welcome!',
        'profile': 'Your Profile',
        'feedback': 'Feedback',
        'categories': 'Categories',
        'back': 'Back',
        'main_menu': 'Main Menu',
        'error': 'Error occurred',
        'try_later': 'Try again later',
        'subscription_required': 'Subscription required',
        'not_subscribed': 'You are not subscribed',
        'subscribe_first': 'Please subscribe first',
        'check_subscription': 'Check subscription',
        'success': 'Success',
        'cancel': 'Cancel',
        'save': 'Save',
        'edit': 'Edit',
        'delete': 'Delete'
    },
    'uz': {
        'welcome': 'Xush kelibsiz!',
        'profile': 'Sizning profilingiz',
        'feedback': 'Fikr-mulohaza',
        'categories': 'Kategoriyalar',
        'back': 'Orqaga',
        'main_menu': 'Asosiy menyu',
        'error': 'Xato yuz berdi',
        'try_later': 'Keyinroq urinib ko\'ring',
        'subscription_required': 'Obuna talab qilinadi',
        'not_subscribed': 'Siz obuna bo\'lmagansiz',
        'subscribe_first': 'Avval obuna bo\'ling',
        'check_subscription': 'Obunani tekshirish',
        'success': 'Muvaffaqiyatli',
        'cancel': 'Bekor qilish',
        'save': 'Saqlash',
        'edit': 'O\'zgartirish',
        'delete': 'O\'chirish'
    }
}

def get_text(key: str, lang: str = 'ru') -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    
    Args:
        key (str): –ö–ª—é—á —Ç–µ–∫—Å—Ç–∞
        lang (str): –ö–æ–¥ —è–∑—ã–∫–∞ (ru/en/uz)
        
    Returns:
        str: –¢–µ–∫—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    """
    return TEXTS.get(lang, TEXTS['ru']).get(key, TEXTS['ru'].get(key, key))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
log_level = getattr(logging, LOG_LEVEL)

handlers = [logging.StreamHandler(sys.stdout)]  # –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –≤ stdout

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ Koyeb
if not os.getenv("KOYEB", False) and not os.path.exists('logs'):
    os.makedirs('logs')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞ Koyeb
    if not os.getenv("KOYEB", False):
        handlers.append(
            RotatingFileHandler(
                'logs/bot.log',
                maxBytes=10485760,  # 10MB
                backupCount=5,
                encoding='utf-8'
            )
        )

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=log_level,
    handlers=handlers
)

logger = logging.getLogger(__name__)

PROFILE_MESSAGE = """
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üîπ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}
üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {orders_count}
üîπ –Ø–∑—ã–∫: {language}
"""

# –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
try:
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞")
    update_result = update_products_from_moysklad()
    if update_result:
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –ú–æ–π–°–∫–ª–∞–¥")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ú–æ–π–°–∫–ª–∞–¥: {str(e)}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω PUFF SMOKE! üå¨Ô∏è\n"
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.",
            reply_markup=reply_markup
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start: {str(e)}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

async def check_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if query.from_user.username in ADMIN_USERNAMES:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏")
            await show_main_menu(update, context)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_USERNAME}")
            member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–Ω–∞–ª–µ: {member.status}")
            is_subscribed = member.status in ['member', 'administrator', 'creator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
            is_subscribed = False

        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {is_subscribed}")

        if is_subscribed:
            try:
                # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                await show_main_menu(update, context)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {str(e)}")
                await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        else:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª")
            await query.answer("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ check_subscription: {str(e)}")
        if query:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("üì¶ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ", callback_data="show_categories")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üìù –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é PUFF SMOKE üè™",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é PUFF SMOKE üè™",
            reply_markup=reply_markup
        )

async def show_categories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º parent_id –∏–∑ callback_data
    parent_id = None
    if query.data != "show_categories":
        # –§–æ—Ä–º–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å: category_list_[parent_id] –∏–ª–∏ category_[id]
        parts = query.data.split('_')
        if len(parts) > 2 and parts[1] == "list":
            parent_id = int(parts[2])
        elif len(parts) == 2:
            parent_id = int(parts[1])
    
    with Database() as db:
        categories = db.get_categories(parent_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products = db.get_products_by_category(parent_id) if parent_id else []
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if products:
        for product in products:
            keyboard.append([InlineKeyboardButton(f"üì¶ {product['name']}", 
                                               callback_data=f"product_{product['id']}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in categories:
        keyboard.append([InlineKeyboardButton(f"üìÅ {category['name']}", 
                                           callback_data=f"category_list_{category['id']}")])
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if parent_id:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        with Database() as db:
            current_category = db.get_category(parent_id)
            parent_category_id = current_category.get('parent_id') if current_category else None
        
        if parent_category_id:
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", 
                                               callback_data=f"category_list_{parent_category_id}")])
        else:
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", 
                                               callback_data="show_categories")])
    else:
        keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
                                           callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if parent_id:
        with Database() as db:
            category = db.get_category(parent_id)
        header = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name'] if category else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'}"
    else:
        header = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    
    await query.edit_message_text(header, reply_markup=reply_markup)

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    category_id = int(query.data.split('_')[1])
    
    with Database() as db:
        products = db.get_products_by_category(category_id)
    
    keyboard = []
    for product in products:
        keyboard.append([InlineKeyboardButton(product['name'], callback_data=f"product_{product['id']}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_categories")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=reply_markup)

async def show_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    product_id = int(query.data.split('_')[1])
    
    with Database() as db:
        product = db.get_product(product_id)
    
    availability = []
    if product['stock_point1']:
        availability.append(f"‚úÖ {SHOP_ADDRESSES[1]}")
    else:
        availability.append(f"‚ùå {SHOP_ADDRESSES[1]}")
    if product['stock_point2']:
        availability.append(f"‚úÖ {SHOP_ADDRESSES[2]}")
    else:
        availability.append(f"‚ùå {SHOP_ADDRESSES[2]}")

    message = (
        f"üì¶ {product['name']}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product['description']}\n"
        f"üí∞ –¶–µ–Ω–∞: {product['price']} —Ä—É–±.\n"
        f"üí® –ö—Ä–µ–ø–æ—Å—Ç—å: {product['strength'] if product['strength'] else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
        f"üìç –ù–∞–ª–∏—á–∏–µ:\n{availability[0]}\n{availability[1]}"
    )

    keyboard = []
    if product['stock_point1'] or product['stock_point2']:
        keyboard.append([InlineKeyboardButton("üöö –ö—É–ø–∏—Ç—å —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π", callback_data=f"buy_{product_id}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_{product['category_id']}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

async def process_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    product_id = int(query.data.split('_')[1])
    
    with Database() as db:
        product = db.get_product(product_id)
    
    message = (
        "üöö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ:\n\n"
        "1. –î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä—Å–∫–æ–π —Å–ª—É–∂–±–æ–π\n"
        "2. –¢–æ–≤–∞—Ä –Ω–∞–¥–µ–∂–Ω–æ —É–ø–∞–∫–æ–≤–∞–Ω –∏ –∑–∞—â–∏—â–µ–Ω –æ—Ç –≤—Å–∫—Ä—ã—Ç–∏—è\n"
        "3. –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É\n\n"
        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {product['price']} —Ä—É–±."
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"confirm_{product_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"product_{product_id}")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(message, reply_markup=reply_markup)

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    query = update.callback_query
    product_id = int(query.data.split('_')[1])
    user_id = query.from_user.id
    
    with Database() as db:
        user = db.get_user(user_id)
        product = db.get_product(product_id)
        order_id = db.create_order(user['id'], product_id, 1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
    
    payment_info = (
        "üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ:\n\n"
        f"–°—É–º–º–∞: {product['price']} —Ä—É–±.\n"
        f"–ë–∞–Ω–∫: {PAYMENT_INFO['bank']}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {PAYMENT_INFO['phone']}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
        f"1. –ù–∞–ø–∏—à–∏—Ç–µ @{ADMIN_USERNAMES[0]}\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ\n"
        "3. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #" + str(order_id)
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑", callback_data=f"paid_{order_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(payment_info, reply_markup=reply_markup)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    
    with Database() as db:
        user_data = db.get_user(user.id)
        orders_count = db.get_user_orders_count(user.id)
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —è–∑—ã–∫–∞ –≤ –±–∞–∑–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not user_data or 'language' not in user_data:
            user_data = {'language': 'ru'}
            if not user_data:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                db.create_user(user.id, user.username or '', 'ru')
    
    message = PROFILE_MESSAGE.format(
        username=user.username or "–ù–µ —É–∫–∞–∑–∞–Ω",
        orders_count=orders_count,
        language=LANGUAGES[user_data['language']]
    )
    
    keyboard = [
        [InlineKeyboardButton("üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="language")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
    try:
        message_text = update.message.text
        user = update.effective_user
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (ID: {user.id})")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
        if not message_text.startswith("/admin "):
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
            await update.message.delete()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user.username not in ADMIN_USERNAMES:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
            await update.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
                ]])
            )
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –ø–æ–ø—ã—Ç–∫–µ –≤–∑–ª–æ–º–∞
            for admin in ADMIN_USERNAMES:
                if admin != user.username:
                    await context.bot.send_message(
                        chat_id=f"@{admin}",
                        text=f"üö® –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
                             f"–û—Ç: @{user.username}\n"
                             f"ID: {user.id}\n"
                             f"–í—Ä–µ–º—è: {update.message.date.strftime('%Y-%m-%d %H:%M:%S')}"
                    )
            return

        # –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            auth_data = message_text.replace("/admin ", "").strip().split()
            if len(auth_data) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            password, auth_code = auth_data
        except Exception:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ {user.username}")
            await update.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /admin [–ø–∞—Ä–æ–ª—å] [–∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏]"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏ –∫–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        admin_password = "TestAdmin"  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        current_hour = update.message.date.strftime('%H')
        current_auth_code = f"PS{current_hour}2024"  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫–æ–¥, –º–µ–Ω—è—é—â–∏–π—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å

        if password != admin_password or auth_code != current_auth_code:
            logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ {user.username}")
            await update.message.delete()
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
            )
            return

        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: {user.username}")
        keyboard = [
            [InlineKeyboardButton("üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders")],
            [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üîí –í—ã–π—Ç–∏", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.delete()
        admin_message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=(
                "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
                f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @{user.username}\n"
                f"‚è∞ –í—Ä–µ–º—è –≤—Ö–æ–¥–∞: {update.message.date.strftime('%H:%M:%S')}\n"
                "‚ÑπÔ∏è –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–í—ã–π—Ç–∏'"
            ),
            reply_markup=reply_markup
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –≤—Ö–æ–¥–µ
        for admin in ADMIN_USERNAMES:
            if admin != user.username:
                await context.bot.send_message(
                    chat_id=f"@{admin}",
                    text=f"‚ÑπÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user.username} –≤–æ—à–µ–ª –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
                         f"‚è∞ –í—Ä–µ–º—è: {update.message.date.strftime('%Y-%m-%d %H:%M:%S')}"
                )
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ admin: {str(e)}")
        if update and update.message:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def admin_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤"""
    query = update.callback_query
    if query.from_user.username not in ADMIN_USERNAMES:
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    with Database() as db:
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–∏–µ, —Ç–∞–∫ –∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        orders = db.get_pending_orders()

    if not orders:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
        await query.edit_message_text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    message = "üìã –ó–∞–∫–∞–∑—ã –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n\n"
    keyboard = []
    
    for order in orders:
        status_emoji = "üí∞" if order['status'] == 'paid' else "‚è≥"
        message += (
            f"{status_emoji} –ó–∞–∫–∞–∑ #{order['id']}\n"
            f"–¢–æ–≤–∞—Ä: {order['product_names']}\n"
            f"–ö–ª–∏–µ–Ω—Ç: @{order['username']}\n"
            f"–°—Ç–∞—Ç—É—Å: {'–û–ø–ª–∞—á–µ–Ω' if order['status'] == 'paid' else '–û–∂–∏–¥–∞–µ—Ç'}\n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
        )
        keyboard.append([InlineKeyboardButton(
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å #{order['id']}", 
            callback_data=f"admin_confirm_{order['id']}"
        )])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"""
    query = update.callback_query
    if query.from_user.username not in ADMIN_USERNAMES:
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ", callback_data="admin_edit_stock")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_delete_product")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ]
    await query.edit_message_text("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    if query.from_user.username not in ADMIN_USERNAMES:
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    with Database() as db:
        total_orders = len(db.get_all_orders())
        pending_orders = len(db.get_pending_orders())
        total_users = len(db.get_all_users())
        
    message = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: {pending_orders}\n"
    )
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
    await query.edit_message_text(message, reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    query = update.callback_query
    order_id = int(query.data.split('_')[2])
    
    with Database() as db:
        db.update_order_status(order_id, "confirmed")
        order = db.get_order(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await context.bot.send_message(
                chat_id=order['user_telegram_id'],
                text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n\n"
                     f"üì¶ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑:\n\n"
                     f"1Ô∏è‚É£ –ó–∞–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n"
                     f"   ‚Ä¢ –Ø–Ω–¥–µ–∫—Å Go\n"
                     f"   ‚Ä¢ InDriver\n\n"
                     f"2Ô∏è‚É£ –ü—Ä–æ—Ü–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                     f"   ‚Ä¢ –í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–µ–¥–µ—Ç –∫ –Ω–∞—à–µ–π —Ç–æ—á–∫–µ\n"
                     f"   ‚Ä¢ –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–º—É –≤–∞—à –∑–∞–∫–∞–∑\n"
                     f"   ‚Ä¢ –û–Ω –¥–æ—Å—Ç–∞–≤–∏—Ç –µ–≥–æ –ø—Ä—è–º–æ –∫ –≤–∞–º –¥–æ–º–æ–π\n\n"
                     f"üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–∞–∫–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏:\n"
                     f"   ‚Ä¢ –ë—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ\n"
                     f"   ‚Ä¢ –í—ã —Å–∞–º–∏ –≤—ã–±–∏—Ä–∞–µ—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è\n"
                     f"   ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
                     f"   ‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞\n\n"
                     f"üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è:\n"
                     f"   ‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞\n"
                     f"   ‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
                     f"   ‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {str(e)}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
    await admin_orders(update, context)

async def paid_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    order_id = int(query.data.split('_')[1])
    
    with Database() as db:
        db.update_order_status(order_id, "paid")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = db.get_order(order_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_username in ADMIN_USERNAMES:
            try:
                await context.bot.send_message(
                    chat_id=f"@{admin_username}",
                    text=f"üí∞ –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
                         f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{query.from_user.username or '–ë–µ–∑ username'}\n"
                         "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_username}: {str(e)}")
    
    await query.edit_message_text(
        "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤–∞—à –∑–∞–∫–∞–∑.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω."
    )

async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    query = update.callback_query
    
    await query.edit_message_text(
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–∑—ã–≤, –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã):\n\n"
        "‚ùóÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –º–∞–≥–∞–∑–∏–Ω–∞",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
        ]])
    )
    context.user_data['awaiting_feedback'] = True

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if context.user_data.get('awaiting_feedback'):
        feedback_text = update.message.text
        user = update.effective_user
        
        with Database() as db:
            feedback_id = db.save_feedback(user.id, feedback_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin in ADMIN_USERNAMES:
            try:
                await context.bot.send_message(
                    chat_id=f"@{admin}",
                    text=f"üì¨ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n\n"
                         f"–û—Ç: @{user.username}\n"
                         f"ID: {user.id}\n"
                         f"–¢–µ–∫—Å—Ç: {feedback_text}\n"
                         f"ID –æ—Ç–∑—ã–≤–∞: #{feedback_id}"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin}: {str(e)}")
        
        context.user_data['awaiting_feedback'] = False
        return

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ callback
    if query.data.startswith("admin_"):
        if query.from_user.username not in ADMIN_USERNAMES:
            await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
            
        if query.data == "admin_menu":
            keyboard = [
                [InlineKeyboardButton("üìã –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders")],
                [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="admin_products")],
                [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
            ]
            await query.edit_message_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))
        elif query.data == "admin_orders":
            await admin_orders(update, context)
        elif query.data == "admin_products":
            await admin_products(update, context)
        elif query.data == "admin_stats":
            await admin_stats(update, context)
        elif query.data.startswith("admin_confirm_"):
            await admin_confirm_order(update, context)
        return

    # –û–±—ã—á–Ω—ã–µ callback
    if query.data == "main_menu":
        await show_main_menu(update, context)
    elif query.data == "check_subscription":
        await check_subscription(update, context)
    elif query.data == "show_categories":
        await show_categories(update, context)
    elif query.data.startswith("category_list_"):
        await show_categories(update, context)
    elif query.data.startswith("category_"):
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        category_id = int(query.data.split('_')[1])
        await show_categories(update, context)
    elif query.data.startswith("product_"):
        await show_product(update, context)
    elif query.data.startswith("buy_"):
        await process_buy(update, context)
    elif query.data.startswith("confirm_"):
        await confirm_order(update, context)
    elif query.data.startswith("paid_"):
        await paid_order(update, context)
    elif query.data == "profile":
        await profile(update, context)
    elif query.data == "show_language_menu":
        await show_language_menu(update, context)
    elif query.data.startswith("lang_"):
        await change_language(update, context)
    elif query.data == "show_statistics":
        await show_statistics(update, context)
    elif query.data.startswith("stats_"):
        period = query.data.split("_")[1]
        with Database() as db:
            stats = db.get_statistics(period=period)
        await show_statistics(update, context, stats)
    elif query.data.startswith("complete_cart_"):
        cart_id = int(query.data.split('_')[2])
        with Database() as db:
            cart = db.get_cart(cart_id)
            if cart:
                order_id = db.create_order_from_cart(cart_id)
                await send_order_status_notification(context, order_id, 'created')
                await query.edit_message_text(
                    get_text('order_created', context.user_data.get('language', 'ru')).format(order_id=order_id),
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton(get_text('view_order_btn', context.user_data.get('language', 'ru')), 
                        callback_data=f"view_order_{order_id}")
                    ]])
                )
    elif query.data.startswith("cancel_cart_"):
        cart_id = int(query.data.split('_')[2])
        with Database() as db:
            db.delete_cart(cart_id)
        await query.edit_message_text(
            get_text('cart_cancelled', context.user_data.get('language', 'ru')),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(get_text('back_to_menu_btn', context.user_data.get('language', 'ru')), 
                callback_data="main_menu")
            ]])
        )
    elif query.data.startswith("status_"):
        await update_order_status(update, context)

async def setup_commands(application: Application):
    try:
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        await application.bot.set_my_name("PUFF SMOKE")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
        await application.bot.set_my_description(
            "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ PUFF SMOKE –≤ –¢–æ–ª—å—è—Ç—Ç–∏. "
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã\n"
            "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö\n"
            "- –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π\n"
            "–†–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!"
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        await application.bot.set_my_short_description(
            "–ú–∞–≥–∞–∑–∏–Ω —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å–∏–≥–∞—Ä–µ—Ç PUFF SMOKE –≤ –¢–æ–ª—å—è—Ç—Ç–∏"
        )
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
        commands = [
            ("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            ("help", "‚ùì –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
            ("menu", "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ]
        await application.bot.set_my_commands(commands)
        
        logger.info("–ö–æ–º–∞–Ω–¥—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {str(e)}")

async def forward_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
        if update.channel_post and update.channel_post.chat.username == CHANNEL_USERNAME[1:]:
            logger.info("–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            with Database() as db:
                users = db.get_all_users()
            
            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            successful_sends = 0
            failed_sends = 0
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for user in users:
                try:
                    await context.bot.forward_message(
                        chat_id=user['telegram_id'],
                        from_chat_id=update.channel_post.chat_id,
                        message_id=update.channel_post.message_id
                    )
                    successful_sends += 1
                    await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['telegram_id']}: {str(e)}")
                    failed_sends += 1
            
            logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful_sends}, –û—à–∏–±–æ–∫: {failed_sends}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: {str(e)}")

async def is_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    user = update.effective_user
    return user.username in ADMIN_USERNAMES

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE, stats=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞"""
    if not await is_admin(update, context):
        return
    
    if stats is None:
        with Database() as db:
            stats = db.get_statistics()
    
    message = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*\n\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total_orders']}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {stats['completed_orders']}\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {stats['total_sales']}‚ÇΩ\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: {stats['new_users_24h']}\n\n"
        f"üìà –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ (–∑–∞ –Ω–µ–¥–µ–ª—é):\n"
    )
    
    for product in stats['top_products']:
        message += f"‚Ä¢ {product['name']}: {product['count']} —à—Ç.\n"
    
    message += "\nüìä –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for day in stats['sales_by_day']:
        bar_length = int(day['sales'] / stats['max_daily_sales'] * 20)
        message += f"{day['date']}: {'‚ñà' * bar_length} ({day['sales']}‚ÇΩ)\n"
    
    keyboard = [
        [
            InlineKeyboardButton("üìÖ –ó–∞ –¥–µ–Ω—å", callback_data="stats_day"),
            InlineKeyboardButton("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="stats_week"),
            InlineKeyboardButton("üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="stats_month")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not await is_admin(update, context):
        return
        
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_statistics")],
        [InlineKeyboardButton("üìù –û—Ç–∑—ã–≤—ã", callback_data="show_feedback")],
        [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="manage_products")],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    message = "üë®‚Äçüíº *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_lang = context.user_data.get('language', 'ru')
    
    with Database() as db:
        user_data = db.get_user(user.id)
        orders_count = db.get_user_orders_count(user.id)
    
    message = (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"üÜî ID: `{user.id}`\n"
        f"üë§ –ò–º—è: {user.first_name}\n"
        f"üìù –ù–∏–∫–Ω–µ–π–º: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üõç –ó–∞–∫–∞–∑–æ–≤: {orders_count}\n"
        f"üåê –Ø–∑—ã–∫: {LANGUAGES[user_lang]}"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data="change_nickname")],
        [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="show_language_menu")],
        [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )

async def show_language_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    user = update.effective_user
    
    with Database() as db:
        current_language = db.get_user_language(user.id)
    
    keyboard = []
    for code, name in LANGUAGES.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É —è–∑—ã–∫—É
        button_text = f"‚úÖ {name}" if code == current_language else name
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"lang_{code}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="profile")])
    
    message = get_text('select_language', current_language)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def change_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
    query = update.callback_query
    if query:
        lang = query.data.split('_')[1]
        user_id = update.effective_user.id
        
        with Database() as db:
            if db.update_user_language(user_id, lang):
                await query.answer(get_text('language_changed', lang))
                await show_profile(update, context)
            else:
                await query.answer(get_text('error', lang), show_alert=True)

async def send_abandoned_cart_notification(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω–∞—Ö"""
    with Database() as db:
        abandoned_carts = db.get_abandoned_carts()
        
    for cart in abandoned_carts:
        user_lang = db.get_user_language(cart['user_id'])
        message = get_text('abandoned_cart', user_lang).format(
            product_name=cart['product_name'],
            price=cart['price']
        )
        
        keyboard = [
            [InlineKeyboardButton(get_text('complete_order_btn', user_lang), callback_data=f"complete_cart_{cart['id']}")],
            [InlineKeyboardButton(get_text('cancel_order_btn', user_lang), callback_data=f"cancel_cart_{cart['id']}")]
        ]
        
        try:
            await context.bot.send_message(
                chat_id=cart['user_id'],
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ—à–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–µ: {str(e)}")

async def send_order_status_notification(context: ContextTypes.DEFAULT_TYPE, order_id: int, new_status: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    with Database() as db:
        order = db.get_order(order_id)
        if not order:
            return
        
        user_lang = db.get_user_language(order['user_id'])
        message = get_text(f'order_status_{new_status}', user_lang).format(
            order_id=order['id'],
            product_name=order['product_name']
        )
        
        keyboard = [[InlineKeyboardButton(get_text('view_order_btn', user_lang), callback_data=f"view_order_{order['id']}")]]
        
        try:
            await context.bot.send_message(
                chat_id=order['user_id'],
                text=message,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞: {str(e)}")

def setup_notifications(application: Application):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    job_queue = application.job_queue
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–æ—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä–∑–∏–Ω –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    job_queue.run_repeating(send_abandoned_cart_notification, interval=21600)

async def update_order_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    if not await is_admin(update, context):
        return
    
    try:
        _, order_id, new_status = query.data.split('_')
        order_id = int(order_id)
        
        with Database() as db:
            success = db.update_order_status(order_id, new_status)
            if success:
                await send_order_status_notification(context, order_id, new_status)
                await query.edit_message_text(
                    get_text('status_updated', context.user_data.get('language', 'ru')).format(
                        order_id=order_id,
                        status=new_status
                    ),
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton(
                            get_text('back_btn', context.user_data.get('language', 'ru')), 
                            callback_data="admin_panel"
                        )
                    ]])
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞: {str(e)}")
        await query.edit_message_text(
            get_text('status_update_error', context.user_data.get('language', 'ru')),
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton(
                    get_text('back_btn', context.user_data.get('language', 'ru')), 
                    callback_data="admin_panel"
                )
            ]])
        )

async def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", start))
        application.add_handler(CommandHandler("menu", show_main_menu))
        application.add_handler(CommandHandler("admin", admin_command))
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        application.add_handler(MessageHandler(
            filters.ChatType.CHANNEL & filters.UpdateType.CHANNEL_POST,
            forward_channel_post
        ))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
        application.job_queue.run_once(lambda ctx: setup_commands(application), when=1)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        setup_notifications(application)
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Render)
        port = int(os.getenv("PORT", 8080))
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–æ—Ä—Ç: {port}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL
        webhook_url = os.getenv("WEBHOOK_URL")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        await application.initialize()
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω WEBHOOK_URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook, –∏–Ω–∞—á–µ polling
        if webhook_url and webhook_url.strip():
            logger.info(f"–ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ webhook: {webhook_url}")
            
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π webhook, –µ—Å–ª–∏ –æ–Ω –±—ã–ª (—Å await)
            await application.bot.delete_webhook(drop_pending_updates=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
            await application.start()
            await application.updater.start_webhook(
                listen="0.0.0.0",
                port=port,
                webhook_url=webhook_url,
                drop_pending_updates=True
            )
            
            # –ü–µ—á–∞—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç
            logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç {port}")
            
            # –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            await application.updater.start_webhook_task
        else:
            logger.info("Webhook URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ long polling.")
            # –£–¥–∞–ª—è–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º long polling (—Å await)
            await application.bot.delete_webhook(drop_pending_updates=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ polling
            await application.start()
            await application.updater.start_polling(drop_pending_updates=True)
            
            # –ñ–¥–µ–º, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            await application.updater.stop()
            
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await application.stop()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())

if __name__ == '__main__':
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π main()
    asyncio.run(main()) 